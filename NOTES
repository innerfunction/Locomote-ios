Asset management: Think of the SDK as providing the equivalent of a browser's (or web view's) HTTP cache; network files are requested transparently through the cache, and so may be served from a local source instead of from the remote origin.

Key components:
* Repository: A remote content source (i.e. a content repo). Composed of the following components.
* Settings: Name, network & authentication settings necessary for accessing a repository.
* Fileset: A set of files belonging to a named category; specifies how files within the category are cached and processed.
* FileDB: A DB schema for describing the list of files in a repository, together with their associated meta-data.
* AuthenticationManager: The component responsible for adding authentication information to repository requests.
* CommandProtocol: The component which implements the different operation primitives necessary for downloading content from a repository.

General content types (note - NOT file categories):
* File: Most general type. Any file that may be downloaded from the repository.
* Page: HTML files whose content is downloaded and stored as file meta data; final file content is generated by combining the file data with a template.
* Data: Represented as e.g. a JSON file in the repository, but downloaded entirely as file meta data, possibly represented using several tables in the file DB, and only accessible as JSON data on the client.

(Suggests three possible superclass types implementing ContentAuthorityHandler? Type of response is: File -> depends on referenced file; Page -> HTML; Data -> JSON)

Content components:
* ContentURLProtocol: Implementation of the content: protocol.
* ContentProvider: Provides content to content URLs.
* ContentAuthority: Provides content to a provider for a content authority (i.e. as specified by the first part of a content URL).
* ContentAuthorityRequest: Provides authority, path and parameter information about a content URL request. (NYI)
* ContentAuthorityResponse: Provides methods for writing the response to a content URL request.
* ContentAuthorityHandler: An object which is capable of using a content URL request to generate content for a content URL response. (NYI)
* Bundle: An asset bundle that sources content through a content provider.

Packaging:
* Need a simple way to package all initial content into an app.
* This means all the following:
  - The file DB schema;
  - An initial copy of the file DB;
  - Zip files for each locally cacheable fileset, with contents of each file in the fileset.
* Can packaged files be served from the fileset zip file?
  - Probably better to unzip on demand to a cache location on the device.

Content URLs:
* content://{authority}/{path}
    - where {authority} is e.g. a domain name
    - and {path} is a file path, which may include a repo path (e.g. {account]/{repo}/{branch}) at it's start
    - how the start of the path is interpreted depends on what fields out of (account,repo) are associated with the authority
* content:files.api/{id} - get a file by ID
* content:files.api/{id}/meta - get a file's meta data
* content:files.api/{id}/children - list children of a file (i.e. file's whose path is under the file's path - !need rules for a/index.html vs. a/b/index.html); supports following parameters:
    - type
    - category
* content:files.api/{id}/descendents
* content:files.api/ - list all files; following parameters supported as standard
    - type
    - category
* content:search.api

